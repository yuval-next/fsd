/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteBbbArgs } from "./DeleteBbbArgs";
import { BbbCountArgs } from "./BbbCountArgs";
import { BbbFindManyArgs } from "./BbbFindManyArgs";
import { BbbFindUniqueArgs } from "./BbbFindUniqueArgs";
import { Bbb } from "./Bbb";
import { BbbService } from "../bbb.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Bbb)
export class BbbResolverBase {
  constructor(
    protected readonly service: BbbService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Bbb",
    action: "read",
    possession: "any",
  })
  async _bbbsMeta(
    @graphql.Args() args: BbbCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Bbb])
  @nestAccessControl.UseRoles({
    resource: "Bbb",
    action: "read",
    possession: "any",
  })
  async bbbs(@graphql.Args() args: BbbFindManyArgs): Promise<Bbb[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Bbb, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Bbb",
    action: "read",
    possession: "own",
  })
  async bbb(@graphql.Args() args: BbbFindUniqueArgs): Promise<Bbb | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bbb)
  @nestAccessControl.UseRoles({
    resource: "Bbb",
    action: "delete",
    possession: "any",
  })
  async deleteBbb(@graphql.Args() args: DeleteBbbArgs): Promise<Bbb | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
